---
alwaysApply: true
---

# Стандарты кодирования для Maetry Landing

## Общие принципы
- **Простота превыше всего** - это лендинг, не корпоративное приложение
- **Минимум абстракций** - избегаем излишнего усложнения архитектуры
- **Быстрая разработка** - приоритет скорости над "идеальным" кодом
- **Читаемость** - код должен быть понятен любому разработчику

## Архитектура
- Используем **Feature-Sliced Design** только там, где это действительно нужно
- Не создаем лишние слои абстракции для простых компонентов
- Предпочитаем прямые импорты вместо сложных barrel exports
- Группируем связанные компоненты в папки, но не усложняем структуру

## Компоненты
- **Функциональные компоненты** с хуками - основной подход
- **Минимум пропсов** - если пропсов больше 5, возможно стоит пересмотреть дизайн
- **Inline стили** для простых случаев (не критичных для производительности)
- **Tailwind CSS** - основной инструмент стилизации
- Избегаем создания wrapper компонентов без явной необходимости

## Состояние
- **useState** для локального состояния компонентов
- **Redux Toolkit** только для глобального состояния (тема, локаль)
- Не создаем сложные state management для простых случаев
- Предпочитаем подъем состояния вверх вместо сложных паттернов

## Интернационализация
- Используем **next-intl** для переводов
- Простые ключи переводов без глубокой вложенности
- Локализованные изображения через простые хуки
- Fallback на английский язык

## Стилизация
- **Tailwind CSS** - основной подход
- **CSS модули** только для сложных компонентов
- Избегаем создания собственных design system компонентов
- Используем готовые иконки из **lucide-react**

## Производительность
- **Next.js Image** для всех изображений
- **Lazy loading** для компонентов ниже fold
- Не оптимизируем преждевременно - сначала работает, потом оптимизируем
- Используем **React.memo** только при явных проблемах с производительностью

## Код
- **TypeScript** для типизации, но не переусложняем
- Простые интерфейсы без глубокой вложенности
- **ESLint + Prettier** для форматирования
- Комментарии на русском языке для бизнес-логики

## Файловая структура
- Логичные имена файлов и папок
- Не создаем лишние index.ts файлы
- Группируем по функциональности, а не по типу файлов
- Избегаем глубокой вложенности папок

## Тестирование
- Пока не приоритет - фокус на быстрой разработке
- При необходимости - простые unit тесты для критичной логики

## Деплой
- **Vercel** для хостинга
- **GitHub Actions** для CI/CD (если нужно)
- Простые настройки без излишней автоматизации

## Что НЕ делать
- ❌ Не создавать сложные архитектурные паттерны
- ❌ Не абстрагировать простые вещи
- ❌ Не создавать избыточные типы и интерфейсы
- ❌ Не усложнять простые компоненты
- ❌ Не создавать лишние хуки и утилиты
- ❌ Не переоптимизировать код
- ❌ Не создавать сложные конфигурации

## Что делать
- ✅ Создавать простые, понятные компоненты
- ✅ Использовать готовые решения и библиотеки
- ✅ Писать читаемый код
- ✅ Быстро итерироваться и тестировать
- ✅ Фокусироваться на пользовательском опыте
- ✅ Документировать только сложную логику# Стандарты кодирования для Maetry Landing

## Общие принципы
- **Простота превыше всего** - это лендинг, не корпоративное приложение
- **Минимум абстракций** - избегаем излишнего усложнения архитектуры
- **Быстрая разработка** - приоритет скорости над "идеальным" кодом
- **Читаемость** - код должен быть понятен любому разработчику

## Архитектура
- Используем **Feature-Sliced Design** только там, где это действительно нужно
- Не создаем лишние слои абстракции для простых компонентов
- Предпочитаем прямые импорты вместо сложных barrel exports
- Группируем связанные компоненты в папки, но не усложняем структуру

## Компоненты
- **Функциональные компоненты** с хуками - основной подход
- **Минимум пропсов** - если пропсов больше 5, возможно стоит пересмотреть дизайн
- **Inline стили** для простых случаев (не критичных для производительности)
- **Tailwind CSS** - основной инструмент стилизации
- Избегаем создания wrapper компонентов без явной необходимости

## Состояние
- **useState** для локального состояния компонентов
- **Redux Toolkit** только для глобального состояния (тема, локаль)
- Не создаем сложные state management для простых случаев
- Предпочитаем подъем состояния вверх вместо сложных паттернов

## Интернационализация
- Используем **next-intl** для переводов
- Простые ключи переводов без глубокой вложенности
- Локализованные изображения через простые хуки
- Fallback на английский язык

## Стилизация
- **Tailwind CSS** - основной подход
- **CSS модули** только для сложных компонентов
- Избегаем создания собственных design system компонентов
- Используем готовые иконки из **lucide-react**

## Производительность
- **Next.js Image** для всех изображений
- **Lazy loading** для компонентов ниже fold
- Не оптимизируем преждевременно - сначала работает, потом оптимизируем
- Используем **React.memo** только при явных проблемах с производительностью

## Код
- **TypeScript** для типизации, но не переусложняем
- Простые интерфейсы без глубокой вложенности
- **ESLint + Prettier** для форматирования
- Комментарии на русском языке для бизнес-логики

## Файловая структура
- Логичные имена файлов и папок
- Не создаем лишние index.ts файлы
- Группируем по функциональности, а не по типу файлов
- Избегаем глубокой вложенности папок

## Тестирование
- Пока не приоритет - фокус на быстрой разработке
- При необходимости - простые unit тесты для критичной логики

## Деплой
- **Vercel** для хостинга
- **GitHub Actions** для CI/CD (если нужно)
- Простые настройки без излишней автоматизации

## Что НЕ делать
- ❌ Не создавать сложные архитектурные паттерны
- ❌ Не абстрагировать простые вещи
- ❌ Не создавать избыточные типы и интерфейсы
- ❌ Не усложнять простые компоненты
- ❌ Не создавать лишние хуки и утилиты
- ❌ Не переоптимизировать код
- ❌ Не создавать сложные конфигурации

## Что делать
- ✅ Создавать простые, понятные компоненты
- ✅ Использовать готовые решения и библиотеки
- ✅ Писать читаемый код
- ✅ Быстро итерироваться и тестировать
- ✅ Фокусироваться на пользовательском опыте
- ✅ Документировать только сложную логику